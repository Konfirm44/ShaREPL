@page "/{Guid:guid}"
@inject SharedEnvironmentProvider provider
@inject IJSRuntime JS

@if (env is null)
{
    <p>
        Loading...
    </p>
}
else
{
    <Console OnKeyDown="OnKeyDown" OnInput="OnInput" Output="env.Output" @ref="console"></Console>
    <FloatingButton OnClick="OnClick">Download log</FloatingButton>
}

@code {
    [Parameter]
    public Guid Guid { get; set; }

    Shared.Console? console;

    SharedEnvironment? env;

    protected override async Task OnParametersSetAsync()
    {
        env = await provider.Get(Guid);
        env.Update += async (_, _) => await InvokeAsync(Update);
    }

    async Task OnKeyDown(KeyboardEventArgs e)
    {
        env?.OnKeyDown(e);
        if (env is not null)
        {
            await provider.OnKeyDown(e, env);
        }
    }

    void OnInput(ChangeEventArgs e) => env?.OnInput(e);

    void Update()
    {
        console!.Update(env!.Input);
    }

    async Task OnClick()
    {
        await DownloadFile();
    }

    async Task DownloadFile()
    {
        var dto = new SharedEnvironmentDTO(env!).ToJson();
        var bytes = Encoding.UTF8.GetBytes(dto);
        var fileStream = new MemoryStream(bytes);
        var fileName = "log.json";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
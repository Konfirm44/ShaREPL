@page "/console"
@using CliWrap;
@using CliWrap.Buffered;
@inject ILogger<OtherConsole> logger;

<style>
    .console-input {
        display: flex;
        align-items: flex-end;
    }

    .console-input input {
        width: 100%;
        border: none;
        outline: none;
        font-family: monospace;
        background-color: transparent;
    }

    .console-output {
        white-space: pre-wrap;
        font-family: monospace;
    }
</style>

<div class="console" @onclick="Click">
    <div class="console-output">
        @foreach (var line in outputLines)
    {
        @line <br />
    }
    </div>
    <div class="console-input">
        <input type="text" @ref="inputRef" @bind="input" @onkeydown="OnInputKeyDown" @oninput="OnInput" />
    </div>
</div>

@code {
private ElementReference inputRef;
private string input = "";
private List<string> outputLines = new List<string>();
private MemoryStream inputStream = new(100);
private CommandResult? commandResult;

private async Task Click()
{
    await inputRef.FocusAsync();
}

private async Task OnInputKeyDown(KeyboardEventArgs e)
{
    if (e.Key == "Enter")
    {
        //outputLines.Add($"{input}");
        //var output = await EvaluateInput(input);
        //outputLines.Add(output);
        //input = "";
        var sw = new StreamWriter(inputStream);
        await sw.WriteLineAsync(input);
        await sw.FlushAsync();
        //inputStream.Position = 0;
        //StateHasChanged();
    }
}

private void WriteOutput(string output)
{
    outputLines.Add(output);
    //StateHasChanged();
}

private void OnInput(ChangeEventArgs e)
{
    input = e.Value?.ToString() ?? "";
    StateHasChanged();
}

//private Task<string> EvaluateInput(string input)
//{
//    return Task.FromResult("result");
//}

protected override async Task OnInitializedAsync()
{
    var path = @"C:\Program Files\Microsoft Visual Studio\2022\Community\Msbuild\Current\Bin\Roslyn\csi.exe";

    var sw = new StreamWriter(inputStream);
    await sw.WriteLineAsync("#help");
    await sw.FlushAsync();
    inputStream.Position = 0;

    commandResult = await Cli.Wrap(path)
        .WithStandardInputPipe(PipeSource.FromStream(inputStream))
        .WithStandardOutputPipe(PipeTarget.ToDelegate(WriteOutput))
        //.WithStandardErrorPipe(PipeTarget.ToStream(console.OpenStandardError()))
        .ExecuteBufferedAsync();
}
}
